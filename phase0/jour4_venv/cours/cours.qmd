---
title: "Environnements virtuels Python avec `venv`"
author: "Olivier SAVRIAMA"
format:
  revealjs:
    theme: [default, serif]
    slide-number: true
    transition: fade
    incremental: true
    code-overflow: wrap
    code-line-numbers: true
execute:
  echo: true
---

# Objectifs du cours

- Comprendre **ce qu‚Äôest `venv`** et pourquoi l‚Äôutiliser
- Savoir **cr√©er / activer / utiliser** un environnement virtuel
- G√©rer les d√©pendances avec **`pip`** et **`requirements.txt`**
- Conna√Ætre les **bonnes pratiques** d‚Äôun petit projet Python
- D√©panner les erreurs les plus courantes

---

# Le probl√®me

- Plusieurs projets ‚Üí versions de paquets diff√©rentes (ex: `pandas 1.5` vs `2.x`)

- Installer globalement m√®ne √† des **conflits** et √† de l‚Äô**instabilit√©**

- Besoin d‚Äô**isoler** chaque projet pour garantir que ¬´√ßa marche chez moi et chez toi¬ª

**Solution :** `venv`

---

# D√©finition

> **`venv`** cr√©e un environnement virtuel :  
  - un **mini-Python** + **ses biblioth√®ques**, **dans un dossier du projet**, s√©par√© du reste de la machine.

Cons√©quences :

- Pas d‚Äôinterf√©rences entre projets

- Reproductibilit√© (on peut **recr√©er** le m√™me environnement)

- On n‚Äôa pas besoin de droits admin

---

# Avantages & inconv√©nients

## ‚úÖ Avantages
- **Isolation** des versions
- **Reproductible** via `requirements.txt`
- **Propret√©** : n‚Äôalt√®re pas le syst√®me
- **Collaboration** facilit√©e

## ‚ö†Ô∏è Inconv√©nients
- Penser √† **activer** le venv
- Un dossier `.venv/` par projet  
- Peut sembler ¬´lourd¬ª pour un tr√®s petit script

---

# Arborescence type d‚Äôun projet

```
mon-projet/
‚îú‚îÄ .venv/                 # environnement (NE PAS committer)
‚îú‚îÄ src/                   # code source Python
‚îÇ  ‚îî‚îÄ main.py
‚îú‚îÄ tests/                 # (optionnel) tests unitaires
‚îú‚îÄ requirements.txt       # d√©pendances fig√©es
‚îî‚îÄ README.md
```

> Ajoutez `.venv/` dans `.gitignore`

---

## ‚ö†Ô∏è Probl√®me courant : Git Bash + venv dans VS Code

Sous **Windows**, l‚Äôactivation d‚Äôun venv avec **Git Bash** peut √©chouer avec des erreurs comme :

```bash
bash: uname: command not found
bash: sed: command not found
```

üëâ Cela arrive car **VS Code lance Git Bash sans charger le profil complet**.
Certains utilitaires Unix (`uname`, `sed`, ‚Ä¶) ne sont alors pas disponibles, ce qui casse le script `activate` du venv.

---

## ‚úÖ Solution : corriger le profil Git Bash dans VS Code

1. Ouvrir **Param√®tres JSON** :

   * `Ctrl + Shift + P` ‚Üí taper *Preferences: Open Settings (JSON)*.

2. Ajouter la configuration suivante :

```json
"terminal.integrated.profiles.windows": {
  "Git Bash": {
    "path": "C:\\Program Files\\Git\\bin\\bash.exe",
    "args": ["-l"],
    "icon": "terminal-bash"
  }
},
"terminal.integrated.defaultProfile.windows": "Git Bash"
```

---

3. Sauvegarder, puis relancer le terminal Git Bash dans VS Code.

4. V√©rifier que les utilitaires sont accessibles :

```bash
which uname
which sed
```

---

## üöÄ R√©sultat attendu

* L‚Äôactivation du venv via Git Bash fonctionne normalement :

```bash
source .venv/Scripts/activate
(.venv)
```

* L‚Äôenvironnement est identique √† celui obtenu avec Git Bash lanc√© en dehors de VS Code.

---

## √âtape 1 ‚Äî Cr√©er l‚Äôenvironnement

Dans le dossier du projet :

```bash
python -m venv .venv
```

> Choisir une version pr√©cise si besoin :

> `python3.11 -m venv .venv`

---

## √âtape 2 ‚Äî Activer / D√©sactiver

**macOS / Linux (bash/zsh)**
```bash
source .venv/bin/activate
```

**Windows PowerShell**
```powershell
.venv\Scripts\Activate.ps1
```

**D√©sactiver** (toutes plateformes)
```bash
deactivate
```

---

## √âtape 3 ‚Äî Mettre √† jour `pip` et installer des paquets

```bash
python -m pip install --upgrade pip
pip install pandas requests
```

**V√©rifier**
```bash
python -c "import sys, pandas; print(sys.executable); print(pandas.__version__)"
```

---

## √âtape 4 ‚Äî Geler et partager les d√©pendances

**Exporter** l‚Äô√©tat actuel :

```bash
pip freeze > requirements.txt
```

**Recr√©er** plus tard (ou par un¬∑e coll√®gue) :

```bash
python -m venv .venv
source .venv/bin/activate   # (Windows: .venv\Scripts\Activate.ps1)
pip install -r requirements.txt
```

---

## Exemple minimal de code (src/main.py)

```python
from datetime import datetime

def hello(name: str) -> str:
    return f"Bonjour {name}! Nous sommes le {datetime.now():%Y-%m-%d}."

if __name__ == "__main__":
    print(hello("Pythonista"))
```

**Ex√©cuter**

```bash
python src/main.py
```

---

## Astuces d‚Äô√©quipe

- **M√™me version de Python** (ex: 3.11) not√©e dans le README
- `requirements.txt` **committ√©**

---

## D√©pannage courant

**Paquet introuvable** pendant l‚Äôex√©cution :

- Le venv n‚Äôest pas activ√© : activez-le puis `pip install ...`

**PowerShell bloque l‚Äôactivation (Windows)** :

- Ouvrir PowerShell en tant qu‚Äôutilisateur et ex√©cuter :

  ```powershell
  Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
  ```

  (Fermez/r√©ouvrez le terminal ensuite.)

**Plusieurs Pythons install√©s** :

- Ciblez la version : `python3.11 -m venv .venv`

---

## Alternatives (bref panorama)

- **pipx** : pour installer des **outils** en CLI isol√©s

- **pip-tools / uv** : gestion/√©pingle des versions avanc√©e

- **conda / mamba** : environnements + paquets natifs (scientifique)

- Pour d√©buter sur un petit projet, **`venv` + `pip`** suffit largement

---

## Exercices rapides

1) Cr√©ez un projet `demo-venv`, initialisez `.venv`, activez-le

2) Installez `requests` et √©crivez un petit script qui `GET` une API publique

3) G√©n√©rez `requirements.txt`

4) Supprimez `.venv/`, recr√©ez-le et r√©installez `-r requirements.txt` : √ßa doit **re-fonctionner**

---

# R√©capitulatif

- `venv` = **isoler** + **ma√Ætriser** les d√©pendances

- √âtapes : cr√©er ‚Üí activer ‚Üí installer ‚Üí geler ‚Üí rejouer

- Mettez `.venv/` en **.gitignore**, partagez `requirements.txt`

- V√©rifiez l‚Äôinterpr√©teur : `python -c "import sys; print(sys.executable)"`



**√Ä vous de jouer !**
